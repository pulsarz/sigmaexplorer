@page "/"
@using System.Threading;
@using SigmaExplorer.Shared;
@inject NavigationManager NavigationManager
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject SweetAlertService Swal;

<PageTitle>SigmaExplorer</PageTitle>

<div class="container-fluid">
	<div class="row">
		<div class="col-lg-6 offset-lg-3">
			<RadzenTextBox Placeholder="Search for block, address, transaction" Change=@(async(args) => await OnSearch(args)) class="w-100" />
		</div>
		<div class="col-xl-12">
			<div class="row">
				<div class="col-xl-3">
					<RadzenCard Class="m-3" Style="height: 180px;">
						<RadzenText TextStyle="TextStyle.H4">Average blocktime</RadzenText>
						<ErgoBlockTime AutoRefreshInterval=@AutoRefreshInterval />
					</RadzenCard>
				</div>
				<div class="col-xl-3">
					<RadzenCard Class="m-3" Style="height: 180px;">
						<RadzenText TextStyle="TextStyle.H4">Difficulty</RadzenText>
						<ErgoDifficulty AutoRefreshInterval=@AutoRefreshInterval />
					</RadzenCard>
				</div>
				<div class="col-xl-3">
					<RadzenCard Class="m-3" Style="height: 180px;">
						<RadzenText TextStyle="TextStyle.H4">Epoch status</RadzenText>
						<ErgoEpochStatus AutoRefreshInterval=@AutoRefreshInterval />
					</RadzenCard>
				</div>
				<div class="col-xl-3">
					<RadzenCard Class="m-3" Style="height: 180px;">
						<RadzenText TextStyle="TextStyle.H4">Erg-USD Oracle pool</RadzenText>
						<ErgoOraclePrice AutoRefreshInterval=@AutoRefreshInterval OracleURL="https://erg-oracle-ergusd.spirepools.com/frontendData" />
					</RadzenCard>
				</div>
			</div>
			
			<div class="row">
				
			</div>
		</div>

		<div class="col-xl-12">
			<div class="row">
				<div class="col-xl-6">
					<RadzenCard Class="m-3" Style="height: 540px;">
						<RadzenText TextStyle="TextStyle.H4">Latest blocks</RadzenText>
						<ErgoLatestBlocks PageSize=8 SmallUI=true AllowPaging=false AutoRefreshInterval=@AutoRefreshInterval/>
				
						<div class="pt-2 pb-2">
							<RadzenButton Variant="Variant.Outlined" Click=@OnOpenLatestBlocks Text="View all blocks" ButtonStyle="ButtonStyle.Primary" Class="button-full-width" />
						</div>
					</RadzenCard>
				</div>

				<div class="col-xl-6">
					<RadzenCard Class="m-3" Style="height: 540px;">
					@*
						<RadzenText TextStyle="TextStyle.H4">Mempool</RadzenText>
						<ErgoMempoolTxes PageSize=8 AllowPaging=false AutoRefreshInterval=@AutoRefreshIntervalNoBlockHeightCheck/>
				
						<div class="pt-2 pb-2">
							<RadzenButton Variant="Variant.Outlined" Click=@OnOpenMempool Text="View all mempool transactions" ButtonStyle="ButtonStyle.Primary" Class="button-full-width" />
						</div>
						*@
						<RadzenText TextStyle="TextStyle.H4">Miner distribution</RadzenText>
						<ErgoMinerDistribution AutoRefreshInterval=@AutoRefreshInterval ChartStyle="height: 450px;"/>
					</RadzenCard>
				</div>
			</div>
			
		</div>
		
	</div>
</div>

<style>
	.button-full-width {
		width: 100%;
	}
</style>

@code {
	private int AutoRefreshInterval = Globals.UIRefreshInterval;//We have built in caching of the last known block in  BlockTools so we can just compare block heights and only really update if new block detected. So this interval here can be low.
	private int AutoRefreshIntervalNoBlockHeightCheck = Globals.UIRefreshIntervalMempool;//used for mempool txes

	async Task OnSearch(string value)
	{
		value = value.Trim();
		if (value != "")
		{
			Console.WriteLine($"Search for {value}...");

			//Check if numeric. If so, it's probably a block and we need to check that first.
			int BlockNr = 0;
			var isNumeric = int.TryParse(value, out BlockNr);
			if (isNumeric && BlockNr > 0)
			{
				//Try to retrieve the block by height. If no result, continue;
				GQLBlockDetail block = await GraphQLInterface.GetBlock(null, BlockNr); 
				if (block != null && block.height == BlockNr)
				{
					//Found block height
					Console.WriteLine($"{value} is a block height!");
					NavigationManager.NavigateTo(String.Format("blocks/byid/{0}",block.header.headerId));
					return;
				}
			}

			//Since we got here it was not a block number.
			//Txid is always 64 characters, so test on that. If it matches try to find the tx first. It could also be a block header id so check that aswell.
			if (value.Length == 64)
			{
				GQLTransactionDetail tx = await GraphQLInterface.GetTransaction(value);
				if (tx != null && tx.transactionId == value)
				{
					//Found transaction
					Console.WriteLine($"{value} is a transaction id!");
					NavigationManager.NavigateTo(String.Format("transactions/byid/{0}",tx.transactionId));
					return;
				}
				else
				{
					//Tx not found, check if it's a block header
					GQLBlockDetail block = await GraphQLInterface.GetBlock(value, null); 
					if (block != null)
					{
						//Found block height
						Console.WriteLine($"{value} is a block header id!");
						NavigationManager.NavigateTo(String.Format("blocks/byid/{0}",block.header.headerId));
						return;
					}
				}
			}

			//All that is left now is an address, check if it actually exists.
			GQLAddress address = await GraphQLInterface.GetAddressInfo(value);
			if (address != null && address.address == value)
			{
				//todo check if used = true, if not show error or something? dunno.
				//Found address
				if (address.used == true) {

					Console.WriteLine($"{value} is an address!");
					NavigationManager.NavigateTo(String.Format("addresses/{0}",address.address));
				}
				else
				{
					if (value.Length != 64)
					{
						await Swal.FireAsync("Unused address", String.Format("{0} is an address but it has not been used yet!", value), "warning");
						return;
					}
				}

				
				return;
			}

			//if this was also not an address, check again if its a tx. if the length is 64 just open the tx page, it's probably a tx that is not im the mempool yet. Or so we hope.
			if (value.Length == 64)
			{
				NavigationManager.NavigateTo(String.Format("transactions/byid/{0}",value));
				return;
			}

			//if we got here we got no results, show error
			await Swal.FireAsync("Oops...", "This is an invalid search string!", "error");
		}
		
	}

	private void OnOpenLatestBlocks()
    {
        NavigationManager.NavigateTo("latest_blocks");
    }

	private void OnOpenMempool()
    {
        NavigationManager.NavigateTo("mempool");
    }
}
