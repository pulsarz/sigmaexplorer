
@using SigmaExplorer.Shared

@if (Block != null && Block.height > 0)
{
    <div class="container">
	    <div class="row">
            <div class="col-xl-12">
                <RadzenCard Class="m-0">
                    <table class='table'>
                        <thead>
                        </thead>
                        <tbody>
                            <tr>
                                <td>Height</td>
                                <td>@Block.height</td>
                            </tr>
                            <tr>
                                <td>Timestamp</td>
                                <td>@Block.timestamp</td>
                            </tr>
                            <tr>
                                <td>ID</td>
                                <td style="word-break: break-all;">@Block.header.headerId</td>
                            </tr>
                            <tr>
                                <td>Previous block</td>
                                <td style="word-break: break-all;">@Block.header.parentId</td>
                            </tr>
                            <tr>
                                <td>Difficulty</td>
                                <td style="word-break: break-all;">@Block.header.difficulty</td>
                            </tr>
                            <tr>
                                <td>Extension hash</td>
                                <td style="word-break: break-all;">@Block.header.extensionHash</td>
                            </tr>
                            <tr>
                                <td>Version</td>
                                <td>@Block.header.version</td>
                            </tr>
                            <tr>
                                <td>Votes</td>
                                <td>[@String.Join(", ",Block.header.votes)]</td>
                            </tr>
                            <tr>
                                <td>AD proofs root</td>
                                <td style="word-break: break-all;">@Block.header.adProofsRoot</td>
                            </tr>
                            <tr>
                                <td>Transactions root</td>
                                <td style="word-break: break-all;">@Block.header.transactionsRoot</td>
                            </tr>
                            <tr>
                                <td>State root</td>
                                <td style="word-break: break-all;">@Block.header.stateRoot</td>
                            </tr>
                            <tr>
                                <td>Bits</td>
                                <td>@Block.header.nBits</td>
                            </tr>
                            <tr>
                                <td>PoW solutions</td>
                                <td>
                                    <div style="word-break: break-all;">pk: @Block.header.powSolutions.pk</div>
                                    <div style="word-break: break-all;">w: @Block.header.powSolutions.w</div>
                                    <div style="word-break: break-all;">n: @Block.header.powSolutions.n</div>
                                    <div style="word-break: break-all;">d: @Block.header.powSolutions.d</div>
                                </td>
                            </tr>
                            <tr>
                                <td>Size</td>
                                <td>@String.Format("{0}KB", Math.Round(Block.blockSize/1024.0,2))</td>
                            </tr>
                        </tbody>
                    </table>
                </RadzenCard>
            </div>
        </div>
    </div>
}

@code {
    [Parameter]
    public string? HeaderId { get; set; }
    [Parameter]
    public int? Height { get; set; }
    [Parameter]
    public GQLBlockDetail? Block { get; set; }
    private int blockHeight = 0;

    protected override async Task OnInitializedAsync()
    {
        if (Block == null)
        {
            Block = await GraphQLInterface.GetBlock(HeaderId, Height);
        }
        
        blockHeight = Block.height;
    }
}
