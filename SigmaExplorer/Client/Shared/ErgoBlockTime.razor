
@using SigmaExplorer.Shared
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@implements IDisposable

<div class="row d-flex">
    @if (CurrentEpochAverageBlockTimeMs == 0) {
        <div class="col-xl-12">Loading...</div>
    }
    else
    {
        <div class="col-xl-12">
            @String.Format("Current epoch: {0} seconds",Math.Round(CurrentEpochAverageBlockTimeMs/1000.0,2))
        </div>
    }
</div>
<div class="row d-flex">
    @if (Last64BlocksAverageBlockTimeMs == 0) {
        <div class="col-xl-12">Loading...</div>
    }
    else
    {
        <div class="col-xl-12">
            @String.Format("Last 32 blocks: {0} seconds",Math.Round(Last64BlocksAverageBlockTimeMs/1000.0,2))
        </div>
    }
</div>
<div class="row d-flex">
    @if (TimespanSinceLastBlock == null) {
        <div class="col-xl-12">Loading...</div>
    }
    else
    {
        <div class="col-xl-12">
            @String.Format("Time since last block: {0:%h}h {0:%m}m {0:%s}s",TimespanSinceLastBlock)
        </div>
    }
</div>

@*@if (blockTimeInfoList != null)
{
    <div class="row d-flex">
        <div class="col-xl-12">
            <RadzenChart>
                <RadzenLineSeries Smooth=true Data="@blockTimeInfoList" CategoryProperty="height" Title="" ValueProperty="minedForSeconds">
                    <RadzenSeriesTrendLine Visible=true Stroke="var(--rz-danger-dark)" LineType="LineType.Dashed" />
                </RadzenLineSeries>
            </RadzenChart>
        </div>
    </div>
}
*@


@code {
    [Parameter]
    public int AutoRefreshInterval { get; set; } = 0;

    public List<GQLBlockTimestampOnly>? LastBlocks = null;

    private int CurrentHeight = 0;
    private double CurrentEpochAverageBlockTimeMs = 0;
    private double LastEpochAverageBlockTimeMs = 0;
    private double Last64BlocksAverageBlockTimeMs = 0;
    private List<BlockTimeInfo> blockTimeInfoList = null;

    private TimeSpan? TimespanSinceLastBlock = null;

    private System.Threading.Timer timer = null;

    //https://stackoverflow.com/questions/69093180/blazor-how-to-stop-a-timer-when-exiting-page
    public void Dispose()
    {
        timer?.Dispose();        // because you need it here
    }

    async Task UpateUIValues()
    {
        int height = await BlockTools.GetCurrentHeight();
        var PreviousHeight = CurrentHeight;

        CurrentHeight = height;

        //We do always update the time since last block.
        TimespanSinceLastBlock = await BlockTools.GetTimespanSinceLastBlock();
        StateHasChanged();

        if (PreviousHeight != CurrentHeight)
        {
            //Found new block
            Last64BlocksAverageBlockTimeMs = 0;
            CurrentEpochAverageBlockTimeMs = 0;
            StateHasChanged();//Set loading thingies

            var ErgoEpochLength = await BlockTools.GetErgoEpochLength();

            //try to load last 1024 blocks from localStorage
            List<GQLBlockTimestampOnly> LastBlocks = await BlockTools.GetLastBlocksForStatistics(localStorage, ErgoEpochLength);

            Last64BlocksAverageBlockTimeMs = BlockTools.GetAverageBlockTime(LastBlocks.Take(32).ToList());
            CurrentEpochAverageBlockTimeMs = BlockTools.GetAverageBlockTime(LastBlocks.Take((height % ErgoEpochLength) + 1).ToList());

            StateHasChanged();

            //Now draw a chart with the blocktimes
            //blockTimeInfoList = BlockTools.BuildBlockTimeInfoList(LastBlocks);
            //StateHasChanged();
        }

        
    }

    protected override async Task OnInitializedAsync()
    {
        //Auto refresh dashboard
		if (timer == null && AutoRefreshInterval > 0)
		{
			timer = new Timer(new TimerCallback(_ =>
        {
            InvokeAsync(async () =>
            {
               await UpateUIValues();
            });
        }), null, 0, AutoRefreshInterval);
		}
    }
}
