@using SigmaExplorer.Shared
@implements IDisposable

<RadzenDataGrid @ref="grid" Data="@mempoolTxes" TItem="GQLTransactionDetail" AllowPaging="@AllowPaging" PageSize="@PageSize">
    <Columns>
        <RadzenDataGridColumn TItem="GQLTransactionDetail" Property="transactionId" Title="Id"  >
            <Template Context="detail">
               <a class="link" href="@String.Format("transactions/byid/{0}",detail.transactionId)">@String.Format("{0}", detail.transactionId.Substring(detail.transactionId.Length - 10))</a>
           </Template>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="GQLTransactionDetail" Property="timestamp" Title="Timestamp" >
            <Template Context="detail">
                @String.Format("{0}", Tools.UnixTimeStampMsToDateTime(Convert.ToDouble(detail.timestamp)))
            </Template>
        </RadzenDataGridColumn>
       @* <RadzenDataGridColumn TItem="GQLTransactionDetail" Property="inputs" Title="Inputs"  >
            <Template Context="detail">
               @String.Format("{0}", detail.inputs.Count)
           </Template>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="GQLTransactionDetail" Property="outputs" Title="Outputs" >
            <Template Context="detail">
               @String.Format("{0}", detail.outputs.Count)
           </Template>
        </RadzenDataGridColumn>*@
        <RadzenDataGridColumn TItem="GQLTransactionDetail" Property="size" Title="Size" >
            <Template Context="detail">
                @String.Format("{0}KB", Math.Round(detail.size/1024.0,2))
            </Template>
        </RadzenDataGridColumn>
    
    </Columns>
</RadzenDataGrid>


<style>
    .link {
        color: #0078ff;
    }
</style>


@code {
    [Parameter]
    public int PageSize { get; set; } = 15;
    [Parameter]
    public bool AllowPaging { get; set; } = true;
    [Parameter]
    public int AutoRefreshInterval { get; set; } = 0;

    private List<GQLTransactionDetail>? mempoolTxes;
    private int _dataCount = 0;
    //private int lastHeight = 0;
    private System.Threading.Timer timer = null;
    private RadzenDataGrid<GQLTransactionDetail> grid;

    public void Dispose()
    {
        timer?.Dispose();        // because you need it here
    }

    protected override async Task OnInitializedAsync()
    {
        if (timer == null && AutoRefreshInterval > 0)
        {
            timer = new Timer(new TimerCallback(_ =>
        {
            InvokeAsync(async() =>
            {
                //get entire mempool, do this to prevent duplicate stuff when paging.
                //also mempool is not sorted by default so we need this to be able to show the newest txes
                if (!AllowPaging)
                {
                    mempoolTxes = await GraphQLInterface.GetAllMempoolTransactionsMinimalBatch();
                    mempoolTxes = mempoolTxes.Take(PageSize).ToList();
                }
                else
                {
                    mempoolTxes = await GraphQLInterface.GetAllMempoolTransactionsMinimalBatch();
                }

                await grid.Reload();
                StateHasChanged();
            });
        }), null, 0, AutoRefreshInterval);
        }
    }
}
