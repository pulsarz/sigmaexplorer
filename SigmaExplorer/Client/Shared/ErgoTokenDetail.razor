
@using SigmaExplorer.Shared
@using static FleetSharp.Sigma.ConstantSerializer;
@using static FleetSharp.Sigma.ISigmaCollection;
@using static FleetSharp.Sigma.IPrimitiveSigmaType;

@if (Token != null)
{
    <div class="container">
	    <div class="row">
            <div class="col-xl-12">
                <RadzenCard Class="m-0">
                    <table class='table'>
                        <thead>
                        </thead>
                        <tbody>
                            <tr>
                                <td>Token ID</td>
                                <td style="word-break: break-all;">@Token.tokenId</td>
                            </tr>
                            <tr>
                                <td>Emission amount</td>
                                <td style="word-break: break-all;">@String.Format("{0}",Convert.ToDouble(Token.emissionAmount) / Math.Pow(10,Token.decimals ?? 0))</td>
                                
                            </tr>
                            <tr>
                                <td>Name</td>
                                <td style="word-break: break-all;">@Token.name</td>
                            </tr>
                            <tr>
                                <td>Description</td>
                                <td style="word-break: break-all;">@Token.description</td>
                            </tr>
                            <tr>
                                <td>Type</td>
                                <td style="word-break: break-all;">@Token.type</td>
                            </tr>
                            <tr>
                                <td>Minted on</td>
                                <td style="word-break: break-all;">@String.Format("{0}", Tools.UnixTimeStampMsToDateTime(Convert.ToDouble(Token.box.transaction.timestamp)))</td>
                            </tr>
                            <tr>
                                <td>Minted in block</td>
                                <td style="word-break: break-all;">@Token.box.transaction.inclusionHeight</td>
                            </tr>
                            <tr>
                                <td>Minting transaction</td>
                                <td style="word-break: break-all;">
                                    <a class="link" href="@String.Format("transactions/byid/{0}",Token.box.transaction.transactionId)">@String.Format("{0}", Token.box.transaction.transactionId)</a>
                                </td>
                            </tr>
                        </tbody>
                    </table>
                   
                </RadzenCard>
            </div>
             @if(Token.box.additionalRegisters?.R9 != null && Token.box.additionalRegisters?.R9 != "" && Token.box.additionalRegisters?.R7 == "0e020101")
             {
                string decoded = System.Text.Encoding.UTF8.GetString(SParse(Token.box.additionalRegisters.R9));
                 if (decoded != null && decoded.StartsWith("ipfs://"))
                 {
                     var url = String.Format("{0}/{1}", Globals.IPFSGateway, decoded.Replace("ipfs://",""));

                     <div class="col-xl-6 offset-xl-3" style="margin-top: 15px;">
                         <RadzenCard Class="m-0" Style="text-align: center;">
                             <img style="height: 500px; width: 500px; object-fit: contain;" src=@url/>
                         </RadzenCard>
                      </div>
                 }
             }
            
        </div>
    </div>
}

@code {
    [Parameter]
    public string? TokenID { get; set; }
    [Parameter]
    public GQLTokenDetail? Token { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (Token == null && TokenID != null)
        {
            Token = await GraphQLInterface.GetTokenDetailById(TokenID);
        }
    }
}
