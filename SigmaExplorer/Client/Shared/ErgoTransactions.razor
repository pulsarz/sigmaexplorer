@using SigmaExplorer.Shared


    <div class="container">
        <div class="row">
            <div class="col-lg-12">
                @if (TransactionID != null && dtLastCheckForTx != null && SingleTX == null && !IsLoading)
                {
                    <div>@String.Format("{0}: Waiting for transaction to appear in mempool...",dtLastCheckForTx)</div>
                }
                else {
                    <RadzenDataList @ref="list" Data="@transactions" Count="@_dataCount" LoadData="@LoadData"  TItem="GQLTransactionDetail" AllowPaging="@AllowPaging" PageSize="@PageSize">
                        <Template Context="tx">
                            @if(IsLoading)
                            {
                                <div class="col-xl-12">Loading...</div>
                            }
                            else
                            {
                                <div class="row">
                                    <div class="col-lg-6">
                                        <RadzenText TextStyle="TextStyle.Body1" Style="overflow: hidden;">
                                            <a class="link" href="@String.Format("transactions/byid/{0}",tx.transactionId)">@String.Format("{0}", tx.transactionId)</a>
                                        </RadzenText>
                                    </div>
                                    <div class="col-lg-6">
                                        <RadzenText TextStyle="TextStyle.Body1" TextAlign="TextAlign.Right">@String.Format("{0}", Tools.UnixTimeStampMsToDateTime(Convert.ToDouble(tx.timestamp)))</RadzenText>
                                    </div>
                        
                                </div>

                                <div class="row">
                                    <RadzenCard class="col-lg-6">
                                        <ErgoTransactionsUIInputBlock TX=@tx />
                                    </RadzenCard>
                                    <RadzenCard class="col-lg-6">
                                        <ErgoTransactionsUIOutputBlock TX=@tx />
                                    </RadzenCard>
                        
                                </div>
                                <div class="row" style="margin-top: 5px;">
                                    <div class="col-lg-12" style="text-align: right;">
                                        @if (tx.inclusionHeight == null || tx.inclusionHeight == 0) {
                                            <RadzenButton Variant="Variant.Outlined" Text="Unconfirmed" ButtonStyle="ButtonStyle.Warning" Size="ButtonSize.Small" Disabled=true class="ButtonDisabledUnsetOpacity" />
                                        }
                                        else if ((currentHeight - tx.inclusionHeight + 1) == 1) {
                                            <RadzenButton Variant="Variant.Outlined" Text="1 Confirmation" ButtonStyle="ButtonStyle.Success" Size="ButtonSize.Small" Disabled=true class="ButtonDisabledUnsetOpacity" />
                                        }
                                        else
                                        {
                                            <RadzenButton Variant="Variant.Outlined" Text=@String.Format("{0} Confirmations",(currentHeight - tx.inclusionHeight + 1)) ButtonStyle="ButtonStyle.Success" Size="ButtonSize.Small" Disabled=true class="ButtonDisabledUnsetOpacity" />
                                        }

                                    @if(tx.outputs != null)
                                    {
                                        @if(Address != null && tx.inputs != null)
                                        {
                                            @*Take total inputs from this address and subtract the total outputs from this tx*@
                                            var ergAmt = Convert.ToDouble(tx.outputs.Where(e => e.address == Address)?.Sum(e => Convert.ToDouble(e.value)) / 1000000000) - Convert.ToDouble(tx.inputs.Where(e => e.box.address == Address)?.Sum(e => Convert.ToDouble(e.box.value)) / 1000000000);
                                            var color = (ergAmt >= 0 ? ButtonStyle.Dark : ButtonStyle.Danger);
                                            <RadzenButton Variant="Variant.Outlined" Text=@String.Format("{0} ERG",ergAmt) ButtonStyle=@color Size="ButtonSize.Small" Disabled=true class="ButtonDisabledUnsetOpacity" />
                                        }
                                        else
                                        {
                                            var ergAmt = Convert.ToDouble(tx.outputs?.Sum(e => Convert.ToDouble(e.value)) / 1000000000);
                                            var color = (ergAmt >= 0 ? ButtonStyle.Dark : ButtonStyle.Danger);
                                            <RadzenButton Variant="Variant.Outlined" Text=@String.Format("{0} ERG",ergAmt) ButtonStyle=@color Size="ButtonSize.Small" Disabled=true class="ButtonDisabledUnsetOpacity" />
                                        }
                                    }
                                    </div>
                                </div>
                            }
                        </Template>
                    </RadzenDataList>
                }
            </div>
        </div>
    </div>




<style>
    .link {
        color: #0078ff;
    }
    .ButtonDisabledUnsetOpacity,
    .rz-button.rz-state-disabled.ButtonDisabledUnsetOpacity
    {
        opacity: unset !important;
    }
</style>


@code {
    [Parameter]
    public int PageSize { get; set; } = 5;
    [Parameter]
    public bool AllowPaging { get; set; } = true;
    [Parameter]
    public string? HeaderId { get; set; }
    [Parameter]
    public string? TransactionID { get; set; }
    [Parameter]
    public string? Address { get; set; }
    [Parameter]
    public bool MempoolOnly { get; set; } = false;

    private List<GQLTransactionDetail>? transactions;
    private List<GQLTransactionDetail>? mempoolTransactions;
    private int _dataCount = 0;
    private int _dataCountMempool = 0;
    private int currentHeight = 0;
    private bool IsLoading = false;
    private RadzenDataList<GQLTransactionDetail> list;

    private System.Threading.Timer timerWaitForTX = null;
    private DateTime? dtLastCheckForTx = null;
    private GQLTransactionDetail? SingleTX = null;

    //https://stackoverflow.com/questions/69093180/blazor-how-to-stop-a-timer-when-exiting-page
    public void Dispose()
    {
        timerWaitForTX?.Dispose();        // because you need it here
    }

    protected override async Task OnParametersSetAsync()
    {
        IsLoading = true;
        currentHeight = await BlockTools.GetCurrentHeight();
        _dataCount = 0;
        _dataCountMempool = 0;
        transactions = null;
        mempoolTransactions = null;
        StateHasChanged();
        if (list != null) await list.Reload();
    }

    async Task LoadData(LoadDataArgs args)
    {
        IsLoading = true;
        StateHasChanged();
        if (_dataCount == 0)
        {
            if (TransactionID != null)
            {
                _dataCount = 1;
            }
            else if (MempoolOnly)
            {
                mempoolTransactions = await GraphQLInterface.GetAllMempoolTransactionsDetail();
                mempoolTransactions = mempoolTransactions.OrderByDescending(e => Convert.ToDouble(e.timestamp)).ToList();
                _dataCount = mempoolTransactions.Count();
            }
            else
            {
                _dataCount = await GraphQLInterface.CountTransactions(HeaderId, Address);
                if (HeaderId == null) {
                    _dataCountMempool = await GraphQLInterface.CountMempoolTransactions(Address);
                }

                _dataCount += _dataCountMempool;
            }

        }

        Console.WriteLine($"Skip: {args.Skip}, Top: {args.Top}");

        int take = args.Top.Value;
        int skip = args.Skip.Value;

        //Handle end of page
        if (_dataCount > take && (take+skip) >= _dataCount)
        {
            //skip = _dataCount - take;
            take = _dataCount - skip;
        }

        if (_dataCount > 0) {
            if (TransactionID != null)
            {
                dtLastCheckForTx = DateTime.Now;
                //need to retrieve single tx
                var tx = await GraphQLInterface.GetTransaction(TransactionID);
                if (tx != null)
                {
                    SingleTX = tx;
                    transactions = new List<GQLTransactionDetail> { tx };
                    if (timerWaitForTX != null)
                    {
                        //stop timer
                        await timerWaitForTX.DisposeAsync();
                    }
                }
                else {
                    //tx not found, try again in 5s
                    if (timerWaitForTX == null)
                    {
                        timerWaitForTX = new Timer(new TimerCallback(_ =>
                        {
                            InvokeAsync(async () =>
                            {
                               await list.Reload();
                               StateHasChanged();
                            });
                        }), null, 0, 1000*5);
		            }
                }
            }
            else if (MempoolOnly)
            {
                var list = mempoolTransactions.Skip(skip).Take(take).ToList();
                transactions = list;
            }
            else
            {
                List<GQLTransactionDetail> newList = new List<GQLTransactionDetail>();
                if (skip < _dataCountMempool && HeaderId == null)
                {
                    var listmempool = await GraphQLInterface.GetMempoolTransactionsDetailBatch(take,skip,Address, TransactionID);//take can be larger then actual mempool tx count but it doesnt matter
                    take = take - listmempool.Count();
                    newList.AddRange(listmempool);
                }

                skip -= _dataCountMempool;

                if (skip < 0)
                {
                    skip = 0;
                }

                if (take > 0)
                {
                    var list = await GraphQLInterface.GetTransactionsDetailBatch(take, skip, HeaderId, Address, TransactionID);
                    newList.AddRange(list);
                }

                transactions = newList;

                foreach (var tx in transactions)
                {
                    if (tx.inclusionHeight > currentHeight)
                    {
                        //update currentheight if we found one that is higher then current one we have to fix 0 confirmations bug.
                        currentHeight = tx.inclusionHeight ?? currentHeight;
                    }
                }
            }
        }
        IsLoading = false;
        StateHasChanged();
    }
}
