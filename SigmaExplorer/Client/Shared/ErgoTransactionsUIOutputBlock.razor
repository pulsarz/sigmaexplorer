@using SigmaExplorer.Shared
@inject TooltipService tooltipService
@inject Blazored.LocalStorage.ILocalStorageService localStorage

@if(TX != null && TX.outputs != null)
{
    @for (var i = 0; i < Math.Min(5,TX.outputs.Count); i++)
    {
        var output = TX.outputs[i];
        <div class="row">
            <RadzenText TextStyle="TextStyle.Body2" TextAlign="TextAlign.Left" class="text-truncate col-lg-8">
                <a class="link" href="@String.Format("addresses/{0}",output.address)">@String.Format("{0}", output.address)</a>
            </RadzenText>
            <RadzenText TextStyle="TextStyle.Body2" TextAlign="TextAlign.Right" class="col-lg-3">@String.Format("{0} ERG",Convert.ToDouble(output.value)/1000000000)</RadzenText>
            @if (output.assets != null && output.assets.Count() > 0)
            {
                <RadzenButton Variant="Variant.Text" class="col-lg-1" Text=@String.Format("+{0}",output.assets.Count()) ButtonStyle="ButtonStyle.Primary" Size="ButtonSize.Small" MouseEnter="@(async(args) => await ShowTooltipWithHtml(args, output.assets, new TooltipOptions(){ Duration = null }))" />
            }
       </div>
    }
    @if (TX.outputs.Count > 5) {
        //need to show the show more button here with a callback to add them
        <div style="text-align: center; margin-top: 5px;">
            <RadzenButton Variant="Variant.Outlined" Click=@OnToggleInputs Text=@ButtonText ButtonStyle="ButtonStyle.Primary" Size="ButtonSize.Small" />
        </div>

        if (IsExpanded)
        {
            for (var i = 5; i < TX.outputs.Count; i++)
            {
                var output = TX.outputs[i];
                <div class="row">
                    <RadzenText TextStyle="TextStyle.Body2" TextAlign="TextAlign.Left" class="text-truncate col-lg-8">
                        <a class="link" href="@String.Format("addresses/{0}",output.address)">@String.Format("{0}", output.address)</a>
                    </RadzenText>
                    <RadzenText TextStyle="TextStyle.Body2" TextAlign="TextAlign.Right" class="col-lg-3">@String.Format("{0} ERG",Convert.ToDouble(output.value)/1000000000)</RadzenText>
                    @if (output.assets != null && output.assets.Count() > 0)
                    {
                        <RadzenButton Variant="Variant.Text" class="col-lg-1" Text=@String.Format("+{0}",output.assets.Count()) ButtonStyle="ButtonStyle.Primary" Size="ButtonSize.Small" MouseEnter="@(async(args) => await ShowTooltipWithHtml(args, output.assets, new TooltipOptions(){ Duration = null }))" />
                    }
               </div>
            }
        }
    }
}
                          

@code {
    [Parameter]
    public GQLTransactionDetail TX { get; set; }

    private bool IsExpanded { get; set; } = false;
    private string ButtonText { get; set; } = "View more";

    protected override async Task OnParametersSetAsync()
    {
        StateHasChanged(); 
    }

    void OnToggleInputs()
    {
        if (!IsExpanded)
        {
            IsExpanded = true;
            ButtonText = "View less";
        }
        else
        {
            IsExpanded = false;
            ButtonText = "View more";
        }
        StateHasChanged();
    }

    async Task ShowTooltipWithHtml(ElementReference elementReference, List<GQLTransactionDetailAsset> assets, TooltipOptions options = null)
    {
        var infos = new List<(string, string, double)>();
        List<GQLToken?> tokens = await BlockTools.GetTokensInfo(localStorage, assets.Select(x => x.tokenId).ToList());

        foreach (var asset in assets)
        {
            GQLToken? tokenInfo = tokens.FirstOrDefault(x => x.tokenId == asset.tokenId);
            if (tokenInfo != null)
            {
                double amount = Convert.ToDouble(asset.amount);
                string name = tokenInfo.name;
                if (name == null || name == "") name = tokenInfo.tokenId;
                if (tokenInfo.decimals != 0 && tokenInfo.decimals > 0)
                {
                    amount = amount / Math.Pow(10,(tokenInfo.decimals ?? 0));
                }
                infos.Add(( asset.tokenId, name, amount ));
            }
            else
            {
                infos.Add(( asset.tokenId, "Failed to retrieve token!", 0 ));
            }
        }

        tooltipService.Open(elementReference, ds =>
        @<div>
                @foreach (var info in infos)
                {
                    <div>
                    <a class="link" style="color: #fff;" href=@String.Format("token/byid/{0}",info.Item1)>@info.Item2</a>&nbsp;@info.Item3
                    </div>
                }
        </div>
    , options);
    }
}
