@using SigmaExplorer.Shared
@inject Blazored.LocalStorage.ILocalStorageService localStorage

<div class="top-row ps-3 navbar navbar-dark">
    <div class="container-fluid">
        <a class="navbar-brand" href="">SigmaExplorer</a>
        <button title="Navigation menu" class="navbar-toggler" @onclick="ToggleNavMenu">
            <span class="navbar-toggler-icon"></span>
        </button>
    </div>
</div>

<div style="margin-left: 25px; display: inline-flex;">
    <RadzenText Style="color: #fff;" TextStyle="TextStyle.Overline">Network: @network&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</RadzenText>
    <RadzenText Style="color: #fff;" TextStyle="TextStyle.Overline">Explorer height: @LastBlockHeight</RadzenText>
</div>
@*<RadzenTextBox @bind-Value=@Globals.GraphQLEndpoint Change=@(async (args) => await OnChangeGQLEndpoint(args)) Class="w-100" />*@



<div class="@NavMenuCssClass" @onclick="ToggleNavMenu">
    <nav class="flex-column">
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="" Match="NavLinkMatch.All">
                <span class="oi oi-home" aria-hidden="true"></span> Home
            </NavLink>
        </div>
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="latest_blocks">
                <span class="oi oi-list-rich" aria-hidden="true"></span> Latest blocks
            </NavLink>
        </div>
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="mempool">
                <span class="oi oi-timer" aria-hidden="true"></span> Mempool
            </NavLink>
        </div>
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="network_chart">
                <span class="oi oi-bar-chart" aria-hidden="true"></span> Network chart
            </NavLink>
        </div>
    </nav>
</div>

@code {
    private bool collapseNavMenu = true;

    private string? NavMenuCssClass => collapseNavMenu ? "collapse" : null;
    private System.Threading.Timer timer = null;
    private int LastBlockHeight = 0;
    private string network = "";

    private async Task OnChangeGQLEndpoint(string value)
    {
        /*if (value == null || value == "")
        {
            value = Globals.DefaultGraphQLEndpoint;
        }

        if (value != Globals.GraphQLEndpoint)
        {
            await localStorage.RemoveItemAsync("tokenCache");
            await localStorage.RemoveItemAsync("ErgoStats_LastBlocks");
            Globals.GraphQLEndpoint = value;
            Globals.LastBlocksForStats = new List<GQLBlockTimestampOnly>();
            await BlockTools.TryUpdateNetworkState();
        }*/
    }

    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }


    public void Dispose()
    {
        timer?.Dispose();        // because you need it here
    }

    async Task UpateUIValues()
    {
        int height = await BlockTools.GetCurrentHeight();

        if (LastBlockHeight != height) {

            LastBlockHeight = height;//state is auto updated by calling getcurrentheight
            network = Globals.LastNetworkState.state.network;
            StateHasChanged();//Only update if changed
        }
    }

    protected override async Task OnInitializedAsync()
    {
		if (timer == null && Globals.UIRefreshInterval > 0)
		{
			timer = new Timer(new TimerCallback(_ =>
        {
            InvokeAsync(async() =>
            {
               await UpateUIValues();
            });
        }), null, 0, Globals.UIRefreshInterval);
		}
    }
}
